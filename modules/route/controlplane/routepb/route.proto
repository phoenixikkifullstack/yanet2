syntax = "proto3";

package routepb;

option go_package = "github.com/yanet-platform/yanet2/modules/route/controlplane/routepb;routepb";

// RouteService is a service for routing table management.
service RouteService {
	// ShowRoutes returns all routes in the routing table.
	rpc ShowRoutes(ShowRoutesRequest) returns (ShowRoutesResponse) {
	}

	// LookupRoute looks up possible routes for the given IP address.
	rpc LookupRoute(LookupRouteRequest) returns (LookupRouteResponse) {
	}

	// InsertRoute inserts a route into the routing table.
	rpc InsertRoute(InsertRouteRequest) returns (InsertRouteResponse) {
	}
}

// ShowRoutesRequest contains filters for route listing.
message ShowRoutesRequest {
	// Filter to show only IPv4 routes.
	bool ipv4_only = 1;
	// Filter to show only IPv6 routes.
	bool ipv6_only = 2;
}

// ShowRoutesResponse contains the list of routes.
message ShowRoutesResponse {
	// List of routes in the routing table.
	repeated Route routes = 1;
}

// LookupRouteRequest contains the IP address to lookup.
message LookupRouteRequest {
	// IP address to lookup.
	string ip_addr = 1;
}

// LookupRouteResponse contains the matching routes for the IP address.
message LookupRouteResponse {
	// Prefix is the prefix that matched with the IP address.
	string prefix = 1;
	// Matching routes for the IP address, sorted with best path first.
	repeated Route routes = 2;
}

// Route represents a routing table entry.
message Route {
	// Network prefix in CIDR notation.
	string prefix = 1;
	// Next hop IP address.
	string next_hop = 2;
	// Peer IP address.
	string peer = 3;
	// Peer's autonomous system number.
	uint32 peer_as = 5;
	// Origin autonomous system number.
	uint32 origin_as = 6;
	// Multi-Exit Discriminator value.
	uint32 med = 7;
	// Local preference value.
	uint32 pref = 8;
	// Route source (e.g., Static, BIRD).
	RouteSourceID source = 10;
	// BGP large communities attached to the route.
	repeated LargeCommunity large_communities = 11;
	// Indicates if this is the best path.
	bool is_best = 12;
}

// LargeCommunity represents a BGP Large Community value.
message LargeCommunity {
	// Global administrator identifier.
	uint32 global_administrator = 1;
	// First part of local data.
	uint32 local_data_part1 = 2;
	// Second part of local data.
	uint32 local_data_part2 = 3;
}

// NeighbourState represents the state of a neighbor entry.
enum RouteSourceID {
	ROUTE_SOURCE_ID_UNKNOWN = 0;
	ROUTE_SOURCE_ID_STATIC = 1;
	ROUTE_SOURCE_ID_BIRD = 2;
}

// InsertRouteRequest is the request to insert a route.
message InsertRouteRequest {
	// ModuleName is the name of the module into which the route should be
	// inserted.
	string module_name = 1;
	// The destination prefix of the route.
	//
	// The prefix must be an IPv4 or IPv6 address followed by "/" and the
	// length of the prefix.
	string prefix = 2;
	// The IP address of the nexthop router.
	//
	// The address must be either an IPv4 or IPv6 address.
	//
	// Example: "fe80::1", "192.168.1.1"
	string nexthop_addr = 3;
	// Numa specifies NUMA nodes that should be affected.
	//
	// Empty means all NUMA nodes.
	repeated uint32 numa = 4;
}

// InsertRouteResponse is the response of "InsertRoute" request.
message InsertRouteResponse {
}
