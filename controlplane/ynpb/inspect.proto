syntax = "proto3";

package ynpb;

option go_package = "github.com/yanet-platform/yanet2/controlplane/ynpb;ynpb";

// InspectService provides methods to inspect the YANET2 configuration.
service InspectService {
	// Inspect retrieves the current configuration state.
	rpc Inspect(InspectRequest) returns (InspectResponse) {
	}
}

// InspectRequest is sent to retrieve current configuration.
message InspectRequest {
}

// InspectResponse contains the complete configuration state.
message InspectResponse {
	// Indices of the dataplane instances.
	repeated uint32 instance_indices = 1;
	// InstanceInfo contains detailed information about each dataplane
	// instance.
	repeated InstanceInfo instance_info = 2;
}

// InstanceInfo contains information about a dataplane instance configuration.
message InstanceInfo {
	// Instance index.
	uint32 instance_idx = 1;
	// Index of NUMA node instance attached to.
	uint32 numa_idx = 2;
	// Dataplane modules available in this dataplane instance.
	repeated DPModuleInfo dp_modules = 3;
	// Control plane configurations in this dataplane instance.
	repeated CPConfigInfo cp_configs = 4;
	// Pipelines configured in this dataplane instance.
	repeated PipelineInfo pipelines = 5;
	// Agents running in this dataplane instance.
	repeated AgentInfo agents = 6;
	// Devices configured in this dataplane instance.
	repeated DeviceInfo devices = 7;
}

// DPModuleInfo contains information about a dataplane module.
message DPModuleInfo {
	// Name is the name of the dataplane module.
	//
	// The module name uniquely identifies the module in the dataplane.
	string name = 1;
}

// CPConfigInfo contains information about a control plane configuration.
message CPConfigInfo {
	// ModuleIdx is the index of the dataplane module this configuration
	// belongs to.
	uint32 module_idx = 1;
	// Name is the unique identifier for this configuration.
	string name = 2;
	// Generation is the generation number of the control plane module.
	uint64 generation = 3;
}

// PipelineInfo contains information about a packet processing pipeline.
message PipelineInfo {
	// Name is the name of the pipeline.
	string name = 1;
	// Modules is a list of module configurations in the pipeline's
	// processing order.
	repeated PipelineModuleInfo modules = 2;
}

// PipelineModuleInfo contains information about a module in a pipeline.
message PipelineModuleInfo {
	// ConfigIndex is the index in the control plane configurations list.
	uint32 config_index = 1;
}

// AgentInfo contains information about a control plane agent.
message AgentInfo {
	// Name is the identifier for this agent.
	string name = 1;
	// Instances is a list of running instances of this agent.
	repeated AgentInstanceInfo instances = 2;
}

// AgentInstanceInfo contains information about a specific agent instance.
message AgentInstanceInfo {
	// Pid is the process ID of the agent instance.
	uint32 pid = 1;
	// MemoryLimit is the maximum memory allocation allowed for this agent
	// instance.
	uint64 memory_limit = 2;
	// Allocated is the current amount of memory allocated by this agent
	// instance.
	uint64 allocated = 3;
	// Freed is the amount of memory freed by this agent instance.
	uint64 freed = 4;
	// Generation is the generation number of the agent instance.
	uint64 generation = 5;
}

// DeviceInfo contains information about a device.
message DeviceInfo {
	// DeviceId is the unique identifier for this device.
	uint32 device_id = 1;
	// Pipelines is a list of pipelines configured for this device.
	repeated DevicePipelineInfo pipelines = 2;
}

// DevicePipelineInfo contains information about a pipeline in a device.
message DevicePipelineInfo {
	// PipelineIdx is the index of the pipeline in the pipeline list.
	uint32 pipeline_idx = 1;
	// Weight is the weight of this pipeline in the device.
	uint64 weight = 2;
}
