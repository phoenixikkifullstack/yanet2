syntax = "proto3";

package coordinatorpb;

option go_package = "github.com/yanet-platform/yanet2/coordinator/coordinatorpb;coordinatorpb";

// RegistryService for the YANET Coordinator.
service RegistryService {
	// RegisterModule registers a new module in the coordinator.
	rpc RegisterModule(RegisterModuleRequest)
		returns (RegisterModuleResponse) {
	}

	// ListModules lists all registered modules.
	rpc ListModules(ListModulesRequest) returns (ListModulesResponse) {
	}

	// GetModule gets a specific module by name.
	rpc GetModule(GetModuleRequest) returns (GetModuleResponse) {
	}
}

// RegisterModuleRequest is a request to register a new module.
message RegisterModuleRequest {
	// Name is the name of the module.
	string name = 1;

	// Endpoint is the gRPC endpoint of the module.
	string endpoint = 2;
}

// RegisterModuleResponse is the response to a register module request.
message RegisterModuleResponse {
	// Success indicates whether registration was successful.
	bool success = 1;

	// Message provides additional information about the registration.
	string message = 2;
}

// ListModulesRequest is a request to list all registered modules.
message ListModulesRequest {
	// This message is empty.
}

// ListModulesResponse is the response to a list modules request.
message ListModulesResponse {
	// Modules is a list of registered module names.
	repeated string modules = 1;
}

// GetModuleRequest is a request to get a specific module by name.
message GetModuleRequest {
	// Name is the name of the module to get.
	string name = 1;
}

// GetModuleResponse is the response to a get module request.
message GetModuleResponse {
	// Exists indicates whether the module exists.
	bool exists = 1;

	// Name is the name of the module.
	string name = 2;

	// Endpoint is the gRPC endpoint of the module.
	string endpoint = 3;
}
